import cv2 # OpenCV라이브러리 사용
import PIL # 이미지 라이브버리로 OpenCV의 영상처리 기능을 대체한다.
import pytesseract # 이미지내에서 문자를 추출하기 위한 OCR기술을 오픈소스로 제공받는다
import datetime # 시간을 다루기 위한 모듈
from openpyxl import * # 엑셀을 다루는 라이브러리
import string # 문자열을 다루는 라이브러리
from PIL.ExifTags import TAGS #이미지의 메타데이터를 가져오기 위한 라이브러리
from PIL import Image



img_path = 'C:/test01.jpg' # 경로 설정
#cv2.imread(이미지파일경로, flag) 이미지 파일을 읽는다.
#cv2.IMREAD_COLOR = 이미지 파일을 Color로 읽어들이며, 투명한 부분을 무시하고 보통 Default 값이다.
img = cv2.imread(img_path,cv2.IMREAD_COLOR)
# cv2.cvtColor 함수 = 색상 모드 변경하기
img2 = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
# 이미지 처리 및 핸들링을 위해서 PIL Image를 사용한다
img2 = PIL.Image.fromarray(img2)
# pytesseract를 사용하여 이미지 내 글자 추출을 txt로 한다.
txt = pytesseract.image_to_string(img2, lang='eng')

start = 0 # 초기화
end = 0 # 초기화
div = [] # 리스트 생성
best = [] # 리스트 생성

i = 0 # 초기화

year = datetime.timedelta(days = 365) # 1년

week = datetime.timedelta(days = 7) # 1주일

month = datetime.timedelta(days = 30) # 1달

day = datetime.timedelta(days = 1) # 1달
#토마토
TOMATO = datetime.datetime.now() + week # 토마토의 유통기한
TOMATO = TOMATO - datetime.datetime.now() # 토마토의 유통기한이 얼마 남았는지 표시
#토마토소스
TOM = datetime.datetime.now() + year # 토마토 소스의 유통기한
TOM = TOM - datetime.datetime.now() # 토마토 소스가 유통기한이 얼마 남았는지 표시
#SUGAR 유통기한없음 추가
SUGAR = datetime.datetime.now() # 설탕의 유통기한
SUGAR = SUGAR - datetime.datetime.now() # 설탕이 유통기한이 얼마 남았는지 표시
#오트밀
MEAL = datetime.datetime.now() + (year*2) # 오트밀의 유통기한
MEAL = MEAL - datetime.datetime.now() # 오트밀의 유통기한이 얼마 남았는지 표시
#SALT 유통기한없음 추가
SALT = datetime.datetime.now() #  소금의 유통기한
SALT = SALT - datetime.datetime.now() # 소금이 유통기한이 얼마 남았는지 표시
#PEANUT
PEANUT = datetime.datetime.now() + (month * 4) # 땅콩의 유통기한
PEANUT = PEANUT - datetime.datetime.now() # 땅콩의 유통기한이 얼마 남았는지 표시
#PNT BUTTR
BUTTR = datetime.datetime.now() + (month * 18) # 땅콩버터의 유통기한
BUTTR = BUTTR - datetime.datetime.now() # 땅콩버터의 유통기한이 얼마 남았는지 표시
#HALFHALF - 우유
HALFHALF = datetime.datetime.now() + ( month / 10) # 우유의 유통기한
HALFHALF = HALFHALF - datetime.datetime.now() # 우유의 유통기한이 얼마 남았는지 표시
#RICE 유통기한없음 추가
RICE = datetime.datetime.now() # 쌀의 유통기한
RICE = RICE - datetime.datetime.now() # 쌀의 유통기한이 얼마 남았는지 표시
# SIMADV - 분유
SIMADV = datetime.datetime.now() +(month * 18)  # 분유의 유통기한
SIMADV = SIMADV - datetime.datetime.now()  # 분유가 유통기한이 얼마 남았는지 표시
#NUTELLA
NUTELLA = datetime.datetime.now() + (month * 4) # 누텔라잼의 유통기한
NUTALLE = NUTELLA - datetime.datetime.now() # 누텔라잼의 유통기한이 얼마 남았는지 표시
#COKE
COKE = datetime.datetime.now() + year # 콜라의 유통기한
COKE = COKE - datetime.datetime.now() # 콜라가 유통기한이 얼마 남았는지 표시
#RAMEN
RAMEN = datetime.datetime.now() + (month * 5) # 라면의 유통기한
RAMEN = RAMEN - datetime.datetime.now() # 라면의 유통기한이 얼마 남았는지 표시
#BANANA
BANANA = datetime.datetime.now() + (day * 10) # 바나나의 유통기한
BANANA = BANANA - datetime.datetime.now() # 바나나의 유통기한이 얼마 남았는지 표시
#SOUR PATCH - 사탕
#CANDY
CANDY = datetime.datetime.now() + (year * 2) # CANDY의 유통기한
CANDY = CANDY - datetime.datetime.now() # CANDY의 유통기한이 얼마 남았는지 표시
#POWERADE
POWERADE = datetime.datetime.now() + (year * 2) # POWERADE의 유통기한
POWERADE = POWERADE - datetime.datetime.now() # POWERADE의 유통기한이 얼마 남았는지 표시

#콘솔에 문자를 출력한다.
print(txt)
while(1): # 반복문 실행
    if(txt[end] == "\n"):
        div.append(txt[start:end])  # txt의 처음부터 끝까지 리스트화한다.
        start = end + 1
        if ("TOMATO" in div[i]):  #div[i]에 있을때
              # best 리스트에 넣는다.
            best.append('유통기한 까지는 {}일 남았습니다.'.format(TOMATO.days, TOM.seconds // 3600))
        elif ("TOM" in div[i]):
            best.append('유통기한 까지는 {}일 남았습니다.'.format(TOM.days, TOM.seconds // 3600))
        elif("SUGAR" in div[i]):
            best.append('유통기한이 없어 서늘하고 건조한 곳에 보관해야합니다.')
        elif ("MEAL" in div[i]):
            best.append('유통기한 까지는 {}일 남았습니다.'.format(MEAL.days, MEAL.seconds // 3600))
        elif ("SALT" in div[i]):
            best.append('유통기한이 없어 서늘하고 건조한 곳에 보관해야합니다.')
        elif ("PEANUT" in div[i]):
            best.append('유통기한 까지는 {}일 남았습니다.'.format(PEANUT.days, PEANUT.seconds // 3600))
        elif ("BUTTR" in div[i]):
            best.append('유통기한 까지는 {}일 남았습니다.'.format(BUTTR.days, BUTTR.seconds // 3600))
        elif ("HALF HALF" in div[i]):
            best.append('유통기한 까지는 {}일 남았습니다.'.format(HALFHALF.days, HALFHALF.seconds // 3600))
        elif ("RICE" in div[i]):
            best.append('유통기한이 없어 밀폐용기에 담아 보관해야합니다.')
        elif ("RAMEN" in div[i]):
            best.append('유통기한 까지는 {}일 남았습니다.'.format(RAMEN.days,  RAMEN.seconds // 3600))
        elif ("SIM ADV" in div[i]):
            best.append('유통기한 까지는 {}일 남았습니다.'.format(SIMADV.days, SIMADV.seconds // 3600))
        elif ("NUTELLA" in div[i]):
            best.append('유통기한 까지는 {}일 남았습니다.'.format(NUTELLA.days, NUTELLA.seconds // 3600))
        elif ("COKE" in div[i]):
            best.append('유통기한 까지는 {}일 남았습니다.'.format(COKE.days, COKE.seconds // 3600))
        elif ("BANANA" in div[i]):
            best.append('유통기한 까지는 {}일 남았습니다.'.format(BANANA.days, BANANA.seconds // 3600))
        elif ("SOURPATCH" in div[i] ):
            best.append('유통기한 까지는 {}일 남았습니다.'.format(CANDY.days, CANDY.seconds // 3600))
        elif ("CANDY" in div[i]):
            best.append('유통기한 까지는 {}일 남았습니다.'.format(CANDY.days, CANDY.seconds // 3600))
        elif ("POWERADE" in div[i]):
            best.append('유통기한 까지는 {}일 남았습니다.'.format(POWERADE.days, COKE.seconds // 3600))
        elif ("TOTAL" in div[i]):
            # 공백을 기준으로 문자열을 나눈다.
            totalList = div[i].split()
            totalSet = i  # total값의 행을 저장
            best.append('총 금액 :  {} '.format(totalList[1])) # 리스트에 넣는다.

        else:
            best.append (" ") # 리스트에 값을 넣는다.
        i = i+1

    if(txt[end:end+4] == "SOLD"): # SOLD 있을떄

        break # 탈출한다. 나온다.
    end = end + 1

wb= Workbook() #엑셀을 연다.
ws = wb.active # 파일을 활성화 시킨다.

ws.title = "영수증 정보" #제목을 준다.

for row in range(1,i+1): #
    ws.cell(row = row, column = 1, value=("{}".format(div[row - 1]))) # 첫번쨰 열에  div리스트를 추가한다.
    ws.cell(row = row, column = 2, value=("{}".format(best[row - 1]))) # 두번쨰 열에 best리스트를 추가한다. // 유통기한


# 엑셀 파일 저장
wb.save('영수증.xlsx')



#여기부터 문자 인식하기

num = []

# 문자메세지가 저장되어 있는 엑셀을 읽어준다
wba = openpyxl.load_workbook('sms.xlsx')

# 현재 시트를 활성화 해준다.
wsa = wba.active
#첫번째 시트를 열어준다
sheet = wba.get_sheet_by_name('Sheet1')
#소비 정보를 저장할 시트를 하나 새로 만들어준다.
wsa1 = wba.create_sheet(title = "소비 정보")

j = 0
k = 0
s = 1
info = []#전화번호를 저장할 리스트
price = []#소비정보를 저장할 리스트
start1 = 0#메세지의 순서를 구분해 줄 변수
end1 = 0#메세지의 순서를 구분해 줄 변수


# 메시지 정보
#시트의 행수 만큼 반복해주며 정보를 가져온다
for ra in sheet.rows:

    # 행의 인덱스 정보
    ri = ra[0].row
    # 전화번호 정보를 저장해준다
    info.append(ra[1].value)
    # 소비정보를 저장해준다
    price.append(ra[5].value)

    #전화번호가 없는 메세지일 경우 비교에 오류가 생기기 때문에 다음칸으로 넘겨준다
    if (info[ri-1] == None):
     continue

    #전화번호가 우리은행의 전화번호이면 정보를 가져온다
    if ("15889955" in info[ri-1]):
     #첫번째 열에 은행 정보를 저장해준다
     wsa1.cell(row=s, column=1, value=("{}".format("우리카드")))
     #두번째 열에 소비 정보를 저장해준다
     wsa1.cell(row=s, column=2, value=("{}".format(price[ri-1])))
     s = s + 1

     #전화번호가 삼성카드의 전화번호이면 정보를 가져온다
    elif ("15888900" in info[ri-1]):
     wsa1.cell(row=s, column=1, value=("{}".format("삼성카드")))
     wsa1.cell(row=s, column=2, value=("{}".format(price[ri - 1])))
     s = s + 1

     # 전화번호가 NH농협카드의 전화번호이면 정보를 가져온다
    elif ("0269426478" in info[ri-1]):
     wsa1.cell(row=s, column=1, value=("{}".format("NH농협")))
     wsa1.cell(row=s, column=2, value=("{}".format(price[ri - 1])))
     s = s + 1

#가계부를 저장해준다.
wba.save('가계부1.xlsx')

#사진의 GPS정보를 가져오는 부분

#GPS정보를 저장할 파일
filename1 = "image (1).jpg"
filename2 = "image (2).jpg"
filename3 = "image (3).jpg"
filename4 = "image (4).jpg"
filename5 = "image (5).jpg"
filename6 = "image (6).jpg"
filename7 = "image (7).jpg"
filename8 = "image (8).jpg"
filename9 = "image (9).jpg"
filename10 = "image (10).jpg"

#파일의 확장자
extension = filename1.split('.')[-1]

#file형식이 jpg일경우 다음의 명령을 실행한다. jpg인 이유는 EXIF메타 데이터가 jpg에만 존재하기 때문이다.
if (extension == 'jpg') | (extension == 'JPG') | (extension == 'jpeg') | (extension == 'JPEG'):
    try:

        # gps정보를 얻기 위한 이미지를 열어준다
        location = Image.open(filename1)

        # 정보를 읽어온다
        info = location._getexif()
        exif = {}
        for tag, value in info.items():
            decoded = TAGS.get(tag, tag)
            exif[decoded] = value

        # EXIF데이터로 부터 gps정보를 얻어온다
        exifGPS = exif['GPSInfo']
        latData = exifGPS[2]
        lonData = exifGPS[4]

        # 위치 정보를 계산한다
        latDeg = latData[0][0] / float(latData[0][1])
        latMin = latData[1][0] / float(latData[1][1])
        latSec = latData[2][0] / float(latData[2][1])
        lonDeg = lonData[0][0] / float(lonData[0][1])
        lonMin = lonData[1][0] / float(lonData[1][1])
        lonSec = lonData[2][0] / float(lonData[2][1])

        Lat = (latDeg + (latMin + latSec / 60.0) / 60.0)
        if exifGPS[1] == 'S': Lat = Lat * -1
        Lon = (lonDeg + (lonMin + lonSec / 60.0) / 60.0)
        if exifGPS[3] == 'W': Lon = Lon * -1

        # 장소를 바로 볼 수 있는 파일로 저장한다.
        msg = "There is GPS info in this picture located at " + str(Lat) + "," + str(Lon)
        print (msg)
        kmlheader = '<?xml version="1.0" encoding="UTF-8"?>' + '<kml xmlns="http://www.opengis.net/kml/2.2">'
        kml = ('<Placemark><name>%s</name><Point><coordinates>%6f,%6f</coordinates></Point></Placemark></kml>') % (
        filename1, Lon, Lat)
        with open(filename1 + '.locationInfo', "w") as f:

            # kml파일에 써서 저장해준다.
            f.write(kmlheader + kml)
        print ('location file created')

        # gps 정보가 없을경우 정보가 없음을 알려준다
    except:
        print ('There is no GPS info in this picture')
        pass
